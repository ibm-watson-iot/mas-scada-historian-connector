{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IBM MAS SCADA Historian Connector \uf0c1 This document describes steps to install and configure MAS SCADA Historian Connector . You can install the Connector as an archive file directly on an on-premise host system or in cloud. The host system must have access to SCADA historian to extract tag data and MAS Monitor to send tag events. The connector application configures device type, device ID, physical and logical interfaces, and dimension data in IBM MAS Monitor from user defined configuration file, extracts device data from SCADA historian and sends the device data to MAS for visualizatiion and AI-driven analytics. Documentation is broken down into following sections: Overview Installation Configuration Connection Configuration Mapping Rules Configuration","title":"Home"},{"location":"#ibm-mas-scada-historian-connector","text":"This document describes steps to install and configure MAS SCADA Historian Connector . You can install the Connector as an archive file directly on an on-premise host system or in cloud. The host system must have access to SCADA historian to extract tag data and MAS Monitor to send tag events. The connector application configures device type, device ID, physical and logical interfaces, and dimension data in IBM MAS Monitor from user defined configuration file, extracts device data from SCADA historian and sends the device data to MAS for visualizatiion and AI-driven analytics. Documentation is broken down into following sections: Overview Installation Configuration Connection Configuration Mapping Rules Configuration","title":"IBM MAS SCADA Historian Connector"},{"location":"configuration/","text":"Connector Configuration \uf0c1 The configuration files are in /volume/config directory. The following configuration files need to be created to configure the connector: connection.json : Contains connection related configuration items to connect to MAS and SCADA historian. mapping.json : Contains mapping configuration to map columns from mapping.csv file into device type, device id, dimensions and metrics, and transform data extracted data from SCADA historian and send to MAS. Pre-requisite \uf0c1 To create connection.json file, you need SCADA Historian and MAS connectivity URL and credentials. For details refer to corresponding sections. A CSV file with TAG Point data, typically exported from PI Builder, is needed to create mapping rules configuration file. Configuration details: \uf0c1 For details on connection and mapping rules configuration items, refer to the following sections: Connection Configuration Mapping Rules Configuration","title":"Configuration"},{"location":"configuration/#connector-configuration","text":"The configuration files are in /volume/config directory. The following configuration files need to be created to configure the connector: connection.json : Contains connection related configuration items to connect to MAS and SCADA historian. mapping.json : Contains mapping configuration to map columns from mapping.csv file into device type, device id, dimensions and metrics, and transform data extracted data from SCADA historian and send to MAS.","title":"Connector Configuration"},{"location":"configuration/#pre-requisite","text":"To create connection.json file, you need SCADA Historian and MAS connectivity URL and credentials. For details refer to corresponding sections. A CSV file with TAG Point data, typically exported from PI Builder, is needed to create mapping rules configuration file.","title":"Pre-requisite"},{"location":"configuration/#configuration-details","text":"For details on connection and mapping rules configuration items, refer to the following sections: Connection Configuration Mapping Rules Configuration","title":"Configuration details:"},{"location":"connection/","text":"Connection Configuration \uf0c1 The connection.json is a JSON file that allows you to define the connection related configuration item to connect to SCADA historian database and MAS. The location of this file is <InstallRoot>/ibm/masshc/volume/config/connection.json . Configuration Object \uf0c1 Provide connection configuration object in a json formated file: { \"id\": \"String\", \"historian\": { \"type\": \"String\", \"jdbcUrl\": \"String\", \"user\": \"String\", \"password\": \"String\", \"serverTimezone\": \"String\", \"startDate\": \"String\", \"dbType\": \"String\", \"schema\": \"String\", \"database\": \"String\", \"extractInterval\": integer }, \"iotp\": { \"url\": \"String\", \"orgId\": \"String\", \"host\": \"String\", \"port\": integer, \"schemaName\": \"String\", \"tenantId\": \"String\", \"apiKey\": \"String\", \"apiToken\": \"String\", \"asHost\": \"String\", \"asKey\": \"String\", \"asToken\": \"String\", \"asAPIVersion\": integer } } Where: id : Description to identify the connection json file historian : This configuration object is required. The configuration items specified in this object are used to connect to SCADA historian to extract device data and send to MAS Monitor. Required Items: type : Historian type. The valid options are \"osipi\" or \"ignition\". jdbcUrl : JDBC URL to connect to the historian database. Example \"jdbc:pisql://10.208.72.125/Data Source=pidemo; Integrated Security=SSPI;\" user : User name to connect to historian. password : Password to connect to historian. serverTimezone : Timezone of historian database server. Example \"American/Chicago\" startDate : Extract device data from the specified date. Valid format is \"YYYY-MM-DD HH:MM:SS\" Optional Items: dbType : Database server configured as SCADA hostorian. The default value is \"pisql\" (OSIPI historian) schema : Schema name. The default value is \"piarchive\" database : Database name. The default value is \"picomp2\" extractInterval : Data from historian is extracted in chunk. The extractInterval specifies the time window in seconds for the chunk. The default value is 60 seconds. The valid range is 30 to 900 seconds. iotp : This configuration object is required. The configuration items are used to configure MAS and send device data to MAS. To configure iotp object, you need credentials from MAS Monitor. You can get these information using MAS Monitor dashboard. Required Items: url : Specifies base URL to invoke APIs to configure MAS orgId : Specifies a six character organization Id assigned to your IoT Platform service. host : Specifies host to connect to MAS to send device data port : Specifies port to connect to MAS apiKey : Specifies API Key to configure device types, devices, interfaces and send MQTT messages. apiToken : Specifies API Token to configure device types, devices, interfaces and send MQTT messages. schemaName : Specifies the schema to configure dimensions tenantid : Specifies tenant id. asHost : Specifies host to configure dimensions asAPIVersion : Specifies API Version. Valid options are 1 and 2. asKey : Specifies API Key to configure dimensions asToken : Specifies API Token to configure dimensions Sample connection.json Configuration File \uf0c1 { \"id\": \"Connection JSON file of ABC Corp.\", \"historian\": { \"type\": \"osipi\", \"jdbcUrl\": \"jdbc:pisql://10.208.72.125/Data Source=pidemo; Integrated Security=SSPI;\", \"user\": \"Administrator\", \"password\": \"xxxxxxxxxx\", \"serverTimezone\": \"American/Chicago\", \"startDate\": \"2021-12-05 05:00:00\" }, \"iotp\": { \"url\": \"https://tenant1.iot.monitordemo.ibmmam.com/api/v0002\", \"orgId\": \"tenant1\", \"host\": \"tenant1.messaging.iot.monitordemo.ibmmam.com\", \"port\": 443, \"schemaName\": \"BLUADMIN\", \"apiKey\": \"a-xxxxxx-tavok0xsxt\", \"apiToken\": \"cNyH_XXXXXX-p2ppVl\", \"tenantId\": \"tenant1\", \"asHost\": \"tenant1.api.monitor.monitordemo3.ibmmam.com\", \"asAPIVersion\": 1, \"asKey\": \"xxxxxxxxxxxxxxxxxx\", \"asToken\": \"xxxxxxxxxxxxxxxxxxxx\" } }","title":"Connection Configuration"},{"location":"connection/#connection-configuration","text":"The connection.json is a JSON file that allows you to define the connection related configuration item to connect to SCADA historian database and MAS. The location of this file is <InstallRoot>/ibm/masshc/volume/config/connection.json .","title":"Connection Configuration"},{"location":"connection/#configuration-object","text":"Provide connection configuration object in a json formated file: { \"id\": \"String\", \"historian\": { \"type\": \"String\", \"jdbcUrl\": \"String\", \"user\": \"String\", \"password\": \"String\", \"serverTimezone\": \"String\", \"startDate\": \"String\", \"dbType\": \"String\", \"schema\": \"String\", \"database\": \"String\", \"extractInterval\": integer }, \"iotp\": { \"url\": \"String\", \"orgId\": \"String\", \"host\": \"String\", \"port\": integer, \"schemaName\": \"String\", \"tenantId\": \"String\", \"apiKey\": \"String\", \"apiToken\": \"String\", \"asHost\": \"String\", \"asKey\": \"String\", \"asToken\": \"String\", \"asAPIVersion\": integer } } Where: id : Description to identify the connection json file historian : This configuration object is required. The configuration items specified in this object are used to connect to SCADA historian to extract device data and send to MAS Monitor. Required Items: type : Historian type. The valid options are \"osipi\" or \"ignition\". jdbcUrl : JDBC URL to connect to the historian database. Example \"jdbc:pisql://10.208.72.125/Data Source=pidemo; Integrated Security=SSPI;\" user : User name to connect to historian. password : Password to connect to historian. serverTimezone : Timezone of historian database server. Example \"American/Chicago\" startDate : Extract device data from the specified date. Valid format is \"YYYY-MM-DD HH:MM:SS\" Optional Items: dbType : Database server configured as SCADA hostorian. The default value is \"pisql\" (OSIPI historian) schema : Schema name. The default value is \"piarchive\" database : Database name. The default value is \"picomp2\" extractInterval : Data from historian is extracted in chunk. The extractInterval specifies the time window in seconds for the chunk. The default value is 60 seconds. The valid range is 30 to 900 seconds. iotp : This configuration object is required. The configuration items are used to configure MAS and send device data to MAS. To configure iotp object, you need credentials from MAS Monitor. You can get these information using MAS Monitor dashboard. Required Items: url : Specifies base URL to invoke APIs to configure MAS orgId : Specifies a six character organization Id assigned to your IoT Platform service. host : Specifies host to connect to MAS to send device data port : Specifies port to connect to MAS apiKey : Specifies API Key to configure device types, devices, interfaces and send MQTT messages. apiToken : Specifies API Token to configure device types, devices, interfaces and send MQTT messages. schemaName : Specifies the schema to configure dimensions tenantid : Specifies tenant id. asHost : Specifies host to configure dimensions asAPIVersion : Specifies API Version. Valid options are 1 and 2. asKey : Specifies API Key to configure dimensions asToken : Specifies API Token to configure dimensions","title":"Configuration Object"},{"location":"connection/#sample-connectionjson-configuration-file","text":"{ \"id\": \"Connection JSON file of ABC Corp.\", \"historian\": { \"type\": \"osipi\", \"jdbcUrl\": \"jdbc:pisql://10.208.72.125/Data Source=pidemo; Integrated Security=SSPI;\", \"user\": \"Administrator\", \"password\": \"xxxxxxxxxx\", \"serverTimezone\": \"American/Chicago\", \"startDate\": \"2021-12-05 05:00:00\" }, \"iotp\": { \"url\": \"https://tenant1.iot.monitordemo.ibmmam.com/api/v0002\", \"orgId\": \"tenant1\", \"host\": \"tenant1.messaging.iot.monitordemo.ibmmam.com\", \"port\": 443, \"schemaName\": \"BLUADMIN\", \"apiKey\": \"a-xxxxxx-tavok0xsxt\", \"apiToken\": \"cNyH_XXXXXX-p2ppVl\", \"tenantId\": \"tenant1\", \"asHost\": \"tenant1.api.monitor.monitordemo3.ibmmam.com\", \"asAPIVersion\": 1, \"asKey\": \"xxxxxxxxxxxxxxxxxx\", \"asToken\": \"xxxxxxxxxxxxxxxxxxxx\" } }","title":"Sample connection.json Configuration File"},{"location":"installation/","text":"Installing MAS SCADA Historian Connector \uf0c1 The installation process includes downloading the installationpackage from IBM Passport Advantage, and completing the initial setup on an on-premise host system or in cloud. The on-premise host system or the cloud instance must have access to SCADA Historian. Before you begin \uf0c1 Before you begin the connector installation, make sure that you complete the following tasks. Check if your environment meets the system requirements \uf0c1 The connector is tested on the following operating environments. Windows 2016 server or higher Windows 10 Ubuntu 18.08 macOS BigSur Memory: 8 GB Disk space: 10 GB of free disk space for install package, data and logs Java Runtime Environment: Java 11. Note that the connector installer will download and install OpenJDK 11 if it can not find Java 11 on the host system. MAS data connector installation steps \uf0c1 On Windows system: \uf0c1 You need Powershell on your Windows system. Powershell installation details: How to install Powershell on Windows ? Use powershell command to download install script from GitHub project, in a temprary directory. Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/ibm-watson-iot/mas-scada-bulkingest/master/bin/install.ps1\" -OutFile \".\\install.ps1\" To configure connector tasks, lauch a Command Propmt with admin priviledges and run the following commands: % powershell.exe -ExecutionPolicy Bypass .\\configTask.ps1 On macOS or Linux systems \uf0c1 Use one the following options to get the project source on your system: Use a Web browser to download zip file of the GitHub project in /tmp directory. Open a shell prompt and run the follwing commands: $ cd /tmp $ unzip mas-scada-bulkingest-master.zip Use curl command to download zip file of the GitHub project in /tmp directory $ curl https://github.com/ibm-watson-iot/mas-scada-bulkingest/archive/master.zip -L -o /tmp/mas-scada-bulkingest-master.zip $ cd /tmp $ unzip mas-scada-bulkingest-master.zip Use git command to clone the GitHub project $ cd /tmp $ git clone https://github.com/ibm-watson-iot/mas-scada-bulkingest To install the connector, open a shell prompt, and run the install script: $ cd /tmp/mas-scada-bulkingest $ ./bin/install.sh","title":"Installation"},{"location":"installation/#installing-mas-scada-historian-connector","text":"The installation process includes downloading the installationpackage from IBM Passport Advantage, and completing the initial setup on an on-premise host system or in cloud. The on-premise host system or the cloud instance must have access to SCADA Historian.","title":"Installing MAS SCADA Historian Connector"},{"location":"installation/#before-you-begin","text":"Before you begin the connector installation, make sure that you complete the following tasks.","title":"Before you begin"},{"location":"installation/#check-if-your-environment-meets-the-system-requirements","text":"The connector is tested on the following operating environments. Windows 2016 server or higher Windows 10 Ubuntu 18.08 macOS BigSur Memory: 8 GB Disk space: 10 GB of free disk space for install package, data and logs Java Runtime Environment: Java 11. Note that the connector installer will download and install OpenJDK 11 if it can not find Java 11 on the host system.","title":"Check if your environment meets the system requirements"},{"location":"installation/#mas-data-connector-installation-steps","text":"","title":"MAS data connector installation steps"},{"location":"installation/#on-windows-system","text":"You need Powershell on your Windows system. Powershell installation details: How to install Powershell on Windows ? Use powershell command to download install script from GitHub project, in a temprary directory. Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/ibm-watson-iot/mas-scada-bulkingest/master/bin/install.ps1\" -OutFile \".\\install.ps1\" To configure connector tasks, lauch a Command Propmt with admin priviledges and run the following commands: % powershell.exe -ExecutionPolicy Bypass .\\configTask.ps1","title":"On Windows system:"},{"location":"installation/#on-macos-or-linux-systems","text":"Use one the following options to get the project source on your system: Use a Web browser to download zip file of the GitHub project in /tmp directory. Open a shell prompt and run the follwing commands: $ cd /tmp $ unzip mas-scada-bulkingest-master.zip Use curl command to download zip file of the GitHub project in /tmp directory $ curl https://github.com/ibm-watson-iot/mas-scada-bulkingest/archive/master.zip -L -o /tmp/mas-scada-bulkingest-master.zip $ cd /tmp $ unzip mas-scada-bulkingest-master.zip Use git command to clone the GitHub project $ cd /tmp $ git clone https://github.com/ibm-watson-iot/mas-scada-bulkingest To install the connector, open a shell prompt, and run the install script: $ cd /tmp/mas-scada-bulkingest $ ./bin/install.sh","title":"On macOS or Linux systems"},{"location":"mapping/","text":"Mapping Rules Configuration \uf0c1 In MAS Data Lake, the device data for different device types are stored in their own table. The tables are named as IOT_<deviceType> . The configuration items that controls the transformation of extracted data from SCADA historian for a specific device type, are defined in mapping configuration file. The location of this configuration file is <InstallRoot>/volume/config/mapping.json . Configuration Object \uf0c1 Provide data configuration object in a json formated file: { \"serviceName\": \"String\", \"serviceType\": \"String\", \"description\": \"String\", \"csvFileName\": \"String\", \"deviceTypes\": [ { \"type\": \"String\", \"tagpathFilters\": [ \"String\" ] } ], \"metrics\": { \"name\": \"String\", \"value\": \"String\", \"unit\": \"String\", \"type\": \"String\", \"decimalAccuracy\": \"String\", \"label\": \"String\" }, \"dimensions\": { \"tagpath\": \"String\", \"tagid\": \"String\", \"site\": \"String\", \"categories\": \"String\" } } Where: serviceName : Defines the name of the service for example PITest1 csvFileName : Name of the CSV file. deviceTypes : Specifies device type and corresponding tagpath patterns. type : Specifies device type id. tagpathFilters : Specifies list of tagpath patterns. metrics : This object defines the mapping rule for device metrics data items. name : Column name in CSV file used to map metric \"Name\" value : Metric value is extracted from PI Archive database at runtime. Set this to an empty string in this configuration object. unit : Column name in CSV file used to map metric \"Unit\" type : Column name in CSV file used to map metric \"Type\" label : Column name in CSV file used to map metric \"Label\" decimalAccuracy : Column name in CSV file used to map metric \"Decimal Accuracy\" dimensions : This object defines the mapping rule for device dimension data. Required items: tagpath : One or more column name(s) in the CSV file used to create \"tag path\" tagid : Column name in the CSV file used to map \"tag id\" Add more dimension data mapping site : Column name in the CSV file used to map \"site name\". Sample CSV file (pidemo.csv) used to define mapping.json configuration file \uf0c1 Parent,Name,ObjectType,Error,UniqueID,ParentUniqueID,Description,Categories,AttributeDefaultUOM,AttributeType,AttributeValue,AttributeDataReference,AttributeDisplayDigits DistillExample\\4820Column,Accumulator Level,Attribute,,5ef1040f-b6af-59f7-352c-0442281fb1f9,9f8a3f5d-2d1b-11ec-98b3-06abac9454c4,Liquid level in reflux accumulator,Process Parameters;,%,Double,,PI Point,-5,,, ... Sample mapping.json Configuration File for \uf0c1 { \"serviceName\": \"Service1\", \"csvFileName\": \"pidemo.csv\", \"deviceTypes\": [ { \"type\": \"PIDemoType\", \"tagpathFilters\": [ \"DistillExample.*\" ] } ], \"metrics\": { \"name\": \"${Name}\", \"value\": \"\", \"unit\": \"${AttributeDefaultUOM}\", \"type\": \"${AttributeType}\", \"decimalAccuracy\": \"${AttributeDisplayDigits}\", \"label\": \"${Description}\" }, \"dimensions\": { \"tagpath\": \"${Parent},${Name}\", \"tagid\": \"${UniqueID}\", \"site\": \"IBMAustin\", \"categories\": \"${Categories}\" } } NOTES: To map a column name specify the column name within curly brackets {} , For example \"unit\": \"${AttributeDefaultUOM}. Column names are case sensitive. The \"unit\" in pidemo.csv example will map to \"lb/h\". You can use comma-separated list of column name(s) to map a metric or dimension data. For example \"${Parent},${Name}\" mapping rule is used to specify tagpath. The tagpath in this example will map to \"DistillExample\\4820Column\\Bottoms Flow\". A back-slash \\ will be used as a field-separator. DO not use curly brackets {} to specify a fixed value. For example \"site\": \"IBMAustin\".","title":"Mapping Rules Configuration"},{"location":"mapping/#mapping-rules-configuration","text":"In MAS Data Lake, the device data for different device types are stored in their own table. The tables are named as IOT_<deviceType> . The configuration items that controls the transformation of extracted data from SCADA historian for a specific device type, are defined in mapping configuration file. The location of this configuration file is <InstallRoot>/volume/config/mapping.json .","title":"Mapping Rules Configuration"},{"location":"mapping/#configuration-object","text":"Provide data configuration object in a json formated file: { \"serviceName\": \"String\", \"serviceType\": \"String\", \"description\": \"String\", \"csvFileName\": \"String\", \"deviceTypes\": [ { \"type\": \"String\", \"tagpathFilters\": [ \"String\" ] } ], \"metrics\": { \"name\": \"String\", \"value\": \"String\", \"unit\": \"String\", \"type\": \"String\", \"decimalAccuracy\": \"String\", \"label\": \"String\" }, \"dimensions\": { \"tagpath\": \"String\", \"tagid\": \"String\", \"site\": \"String\", \"categories\": \"String\" } } Where: serviceName : Defines the name of the service for example PITest1 csvFileName : Name of the CSV file. deviceTypes : Specifies device type and corresponding tagpath patterns. type : Specifies device type id. tagpathFilters : Specifies list of tagpath patterns. metrics : This object defines the mapping rule for device metrics data items. name : Column name in CSV file used to map metric \"Name\" value : Metric value is extracted from PI Archive database at runtime. Set this to an empty string in this configuration object. unit : Column name in CSV file used to map metric \"Unit\" type : Column name in CSV file used to map metric \"Type\" label : Column name in CSV file used to map metric \"Label\" decimalAccuracy : Column name in CSV file used to map metric \"Decimal Accuracy\" dimensions : This object defines the mapping rule for device dimension data. Required items: tagpath : One or more column name(s) in the CSV file used to create \"tag path\" tagid : Column name in the CSV file used to map \"tag id\" Add more dimension data mapping site : Column name in the CSV file used to map \"site name\".","title":"Configuration Object"},{"location":"mapping/#sample-csv-file-pidemocsv-used-to-define-mappingjson-configuration-file","text":"Parent,Name,ObjectType,Error,UniqueID,ParentUniqueID,Description,Categories,AttributeDefaultUOM,AttributeType,AttributeValue,AttributeDataReference,AttributeDisplayDigits DistillExample\\4820Column,Accumulator Level,Attribute,,5ef1040f-b6af-59f7-352c-0442281fb1f9,9f8a3f5d-2d1b-11ec-98b3-06abac9454c4,Liquid level in reflux accumulator,Process Parameters;,%,Double,,PI Point,-5,,, ...","title":"Sample CSV file (pidemo.csv) used to define mapping.json configuration file"},{"location":"mapping/#sample-mappingjson-configuration-file-for","text":"{ \"serviceName\": \"Service1\", \"csvFileName\": \"pidemo.csv\", \"deviceTypes\": [ { \"type\": \"PIDemoType\", \"tagpathFilters\": [ \"DistillExample.*\" ] } ], \"metrics\": { \"name\": \"${Name}\", \"value\": \"\", \"unit\": \"${AttributeDefaultUOM}\", \"type\": \"${AttributeType}\", \"decimalAccuracy\": \"${AttributeDisplayDigits}\", \"label\": \"${Description}\" }, \"dimensions\": { \"tagpath\": \"${Parent},${Name}\", \"tagid\": \"${UniqueID}\", \"site\": \"IBMAustin\", \"categories\": \"${Categories}\" } } NOTES: To map a column name specify the column name within curly brackets {} , For example \"unit\": \"${AttributeDefaultUOM}. Column names are case sensitive. The \"unit\" in pidemo.csv example will map to \"lb/h\". You can use comma-separated list of column name(s) to map a metric or dimension data. For example \"${Parent},${Name}\" mapping rule is used to specify tagpath. The tagpath in this example will map to \"DistillExample\\4820Column\\Bottoms Flow\". A back-slash \\ will be used as a field-separator. DO not use curly brackets {} to specify a fixed value. For example \"site\": \"IBMAustin\".","title":"Sample mapping.json Configuration File for"},{"location":"overview/","text":"Overview \uf0c1 IBM MAS SCADA Historian connector application performs the following tasks: Registers device types, physical and logical interfaces, device id, and dimensions from user defined tag mapping rules and asset CSV file. Extracts tag data from SCADA historian. Transforms tag data into MQTT events and send events to MAS Monitor. The device events can be used by IBM MAS Monitor for visualizatiion and AI-driven analytics. Supported SCADA Historians: OSISOft data historian Ignition Historian High-Level Architecture \uf0c1 OSISOft data historian (PI Data Archive) stores sensor data collected from PLCs. MAS SCADA Historian connector extracts PI Point data from PI Data Archive. MAS SCADA Historian connector sends PI Point data to IBM MAS Monitor using MQTT protocol. MAS Monitor is used for PI Point data visualization and AI-driven analytics.","title":"Overview"},{"location":"overview/#overview","text":"IBM MAS SCADA Historian connector application performs the following tasks: Registers device types, physical and logical interfaces, device id, and dimensions from user defined tag mapping rules and asset CSV file. Extracts tag data from SCADA historian. Transforms tag data into MQTT events and send events to MAS Monitor. The device events can be used by IBM MAS Monitor for visualizatiion and AI-driven analytics. Supported SCADA Historians: OSISOft data historian Ignition Historian","title":"Overview"},{"location":"overview/#high-level-architecture","text":"OSISOft data historian (PI Data Archive) stores sensor data collected from PLCs. MAS SCADA Historian connector extracts PI Point data from PI Data Archive. MAS SCADA Historian connector sends PI Point data to IBM MAS Monitor using MQTT protocol. MAS Monitor is used for PI Point data visualization and AI-driven analytics.","title":"High-Level Architecture"}]}